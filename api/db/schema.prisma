generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  Admin
  Coordinator
  Operator
  Restricted
}

model OptionSet {
  id     Int              @id @default(autoincrement())
  name   String           @unique
  values OptionSetValue[]
}

model OptionSetValue {
  id                 Int       @id @default(autoincrement())
  option_set_id      Int
  label              String
  value              String
  option_set_details OptionSet @relation(fields: [option_set_id], references: [id])

  @@unique([option_set_id, value])
  @@index([option_set_id, label])
}

model Arrestee {
  id             Int       @id @default(autoincrement())
  display_field  String?
  search_field   String?
  first_name     String?
  last_name      String?
  preferred_name String?
  pronoun        String?
  dob            DateTime? @db.Date
  email          String?
  phone_1        String?
  phone_2        String?
  address        String?
  city           String?
  state          String?
  zip            String?
  notes          String?
  custom_fields  Json?
  created_at     DateTime? @default(now())
  created_by_id  Int?
  updated_at     DateTime? @updatedAt
  updated_by_id  Int?
  arrests        Arrest[]
  created_by     User?     @relation("CreatedArrestee", fields: [created_by_id], references: [id])
  updated_by     User?     @relation("ModifiedArrestee", fields: [updated_by_id], references: [id])

  @@index([search_field])
  @@index([last_name])
  @@index([first_name])
  @@index([preferred_name])
}

model CustomSchema {
  id            Int       @id @default(autoincrement())
  table         String
  section       String
  schema        Json
  updated_at    DateTime? @updatedAt
  updated_by_id Int?
  updated_by    User?     @relation(fields: [updated_by_id], references: [id])
}

model Log {
  id             Int       @id @default(autoincrement())
  time           DateTime  @default(now())
  type           String?
  notes          String?
  needs_followup Boolean   @default(false)
  custom_fields  Json?
  created_at     DateTime? @default(now())
  created_by_id  Int?
  updated_at     DateTime? @updatedAt
  updated_by_id  Int?
  created_by     User?     @relation("CreatedLog", fields: [created_by_id], references: [id])
  updated_by     User?     @relation("ModifiedLog", fields: [updated_by_id], references: [id])
  arrests        Arrest[]
  action         Action?   @relation(fields: [action_id], references: [id])
  shift          Json?
  action_id      Int?
}

// model HotlineLog {
//   id            Int       @id @default(autoincrement())
//   start_time    DateTime
//   end_time      DateTime
//   type          String?
//   notes         String?
//   notes_raw     String?
//   custom_fields Json?
//   created_at    DateTime? @default(now())
//   created_by_id Int?
//   updated_at    DateTime? @updatedAt
//   updated_by_id Int?
//   created_by    User?     @relation("CreatedHotlineLog", fields: [created_by_id], references: [id])
//   updated_by    User?     @relation("ModifiedHotlineLog", fields: [updated_by_id], references: [id])
// }

model Arrest {
  id                 Int                      @id @default(autoincrement())
  display_field      String?
  search_field       String?
  date               DateTime?
  location           String?
  charges            String?
  arrest_city        String?
  jurisdiction       String?
  citation_number    String?
  arrestee_id        Int?
  custom_fields      Json?
  created_at         DateTime?                @default(now())
  created_by_id      Int?
  updated_at         DateTime?                @updatedAt
  updated_by_id      Int?
  arrestee           Arrestee?                @relation(fields: [arrestee_id], references: [id], onDelete: Cascade)
  created_by         User?                    @relation("CreatedArrest", fields: [created_by_id], references: [id])
  updated_by         User?                    @relation("ModifiedArrest", fields: [updated_by_id], references: [id])
  action_id          Int?
  action             Action?                  @relation(fields: [action_id], references: [id])
  logs               Log[]
  ignoredDuplicates1 IgnoredDuplicateArrest[] @relation("IgnoredDuplicate1")
  ignoredDuplicates2 IgnoredDuplicateArrest[] @relation("IgnoredDuplicate2")

  @@index([search_field])
  @@index([date])
  @@index([arrest_city])
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  name                   String
  custom_fields          Json?
  role                   Role                     @default(Operator)
  hashedPassword         String?
  salt                   String?
  expiresAt              DateTime?
  resetToken             String?
  resetTokenExpiresAt    DateTime?
  action_ids             Int[] // Array of action IDs
  access_date_min        DateTime?
  access_date_max        DateTime?
  access_date_threshold  Int?
  created_arrests        Arrest[]                 @relation("CreatedArrest")
  updated_arrests        Arrest[]                 @relation("ModifiedArrest")
  created_arrestees      Arrestee[]               @relation("CreatedArrestee")
  updated_arrestees      Arrestee[]               @relation("ModifiedArrestee")
  updated_custom_schemas CustomSchema[]
  // created_hotline_logs   HotlineLog[]   @relation("CreatedHotlineLog")
  // updated_hotline_logs   HotlineLog[]   @relation("ModifiedHotlineLog")
  created_logs           Log[]                    @relation("CreatedLog")
  updated_logs           Log[]                    @relation("ModifiedLog")
  created_table_views    TableView[]              @relation("CreatedTableView")
  updated_table_views    TableView[]              @relation("ModifiedTableView")
  updated_site_settings  SiteSetting[]            @relation("ModifiedSiteSetting")
  ignoredDuplicates      IgnoredDuplicateArrest[]
  created_documents      Document[]               @relation("CreatedDocument")
  updated_documents      Document[]               @relation("LastEditedDocument")
}

model TableView {
  id            Int       @id @default(autoincrement())
  name          String
  state         String
  type          String
  created_at    DateTime? @default(now())
  created_by_id Int?
  updated_at    DateTime? @updatedAt
  updated_by_id Int?
  created_by    User?     @relation("CreatedTableView", fields: [created_by_id], references: [id])
  updated_by    User?     @relation("ModifiedTableView", fields: [updated_by_id], references: [id])
}

model Action {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  start_date    DateTime
  end_date      DateTime?
  jurisdiction  String?
  city          String?
  custom_fields Json?
  Arrest        Arrest[]
  Log           Log[]
}

model SiteSetting {
  id            String    @id
  description   String?
  value         Json
  updated_at    DateTime? @updatedAt
  updated_by    User?     @relation("ModifiedSiteSetting", fields: [updated_by_id], references: [id])
  updated_by_id Int?
}

model IgnoredDuplicateArrest {
  id            Int      @id @default(autoincrement())
  arrest1_id    Int
  arrest2_id    Int
  created_at    DateTime @default(now())
  created_by_id Int

  arrest1    Arrest @relation("IgnoredDuplicate1", fields: [arrest1_id], references: [id], onDelete: Cascade)
  arrest2    Arrest @relation("IgnoredDuplicate2", fields: [arrest2_id], references: [id], onDelete: Cascade)
  created_by User   @relation(fields: [created_by_id], references: [id])

  @@unique([arrest1_id, arrest2_id])
}

model Document {
  id            String   @id @default(cuid())
  name          String   @unique // Document identifier for collaboration (e.g., "project:123")
  title         String?  @unique // Human-readable title
  type          String // Document type (e.g., "project", "team-doc", "wiki", etc.)
  content       Bytes // Yjs document state (binary)
  html_content  String? // Cached HTML content for search/display
  parent_id     String? // Optional parent document ID for hierarchical organization
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  created_by_id Int // User who created the document
  updated_by_id Int? // User who last edited the document

  // Relations
  created_by  User       @relation("CreatedDocument", fields: [created_by_id], references: [id])
  updated_by  User?      @relation("LastEditedDocument", fields: [updated_by_id], references: [id])
  parent      Document?  @relation("DocumentHierarchy", fields: [parent_id], references: [id])
  children    Document[] @relation("DocumentHierarchy")
  access_role Role       @default(Restricted)
  edit_role   Role       @default(Coordinator)

  @@index([type])
  @@index([created_by_id])
  @@index([parent_id])
  @@index([created_at])
}
